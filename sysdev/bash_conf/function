function lgit {
#
# If you change repos in lazygit your shell change directory into that repo on exiting
# $@ passed to lazygit
#
    export LAZYGIT_NEW_DIR_FILE=${HOME}/.lazygit/newdir

	case "$(cat /proc/version)" in
		MINGW*) CMD="winpty lazygit" ;;
		*) CMD="lazygit" ;;
	esac
		
	${CMD} "$@"

    if [[ -f ${LAZYGIT_NEW_DIR_FILE} ]]; then
		cd "$(cat ${LAZYGIT_NEW_DIR_FILE})"
		rm -f ${LAZYGIT_NEW_DIR_FILE} > /dev/null
    fi
}


function gitignore {
#
# save default gitignore for a specific language
# $1 language name
#
	if [[ $1 == 'list' ]]; then
		curl -sL "https://www.gitignore.io/api/list" | sed 's/,/\n/g' | sort
	else
		local language=$1
		curl -sL "https://www.gitignore.io/api/${language}" > .gitignore
	fi
}


function geturls {
#
# get urls from html page
# $1 web page
#
	local URL=$1

	if [[ -x $(which lynx 2> /dev/null) ]]; then
		lynx -nonumbers -dump -listonly "${URL}"
	else
		echo -e "\n${txtred}lynx${txtrst} required\n"
		return 1
	fi
}


function lll {
#
# paging a long ls output
#
	local pager=${PAGER}

	[ -z "${pager}" ] && pager="less -FXRn"
	ls -lrtA --color "$@" | ${pager} ;
}


function date_diff {
#
# Simplest calculator two dates difference: default in days
# $1 first_date
# $2 second_date
# $3 granularity -(s|m|h|d) [seconds|minutes|hours|days]
#
	local period=$((60*60*24))
    local first_date=$(date -d "$1" "+%s")
    local second_date=$(date -d "$2" "+%s")

    case "$3" in
        -s) period=1 ;;
        -m) period=60 ;;
        -h) period=$((60*60)) ;;
    esac

    echo $(( (${first_date} - ${second_date})/(${period}) ))
}


function dateseq() {
#
# print on stdout a list of date by a given range
# $1 start date
# $2 end date
# $3 date format (optionally)
#
    local dstart=$1
    local dend=$2
	local fmt=$3

    [ -z ${fmt} ] && fmt="%Y-%m-%d"
    
    local start=$(date -d ${dstart} +%s)
    local end=$(date -d ${dend} +%s)
    local cur=${start}

    while [ ${cur} -le ${end} ]
    do
        echo $(date -d@${cur} +${fmt})
        let cur+=24*60*60
    done
}


function join_by() {
#
# join element of array by a given separator
# $1 separator
# $* variable number of arguments
#
    local IFS="$1"
    shift
    echo "$*"
}


function gmvtag() {
#
# move tag from one commit to another
# $1 tag name
# $2 remote (default origin)
# $3 branch (default master)
#
	local tag_name=$1
    local remote=$2
	local branch=$3

    [ -z ${remote} ] && remote=origin
	[ -z ${branch} ] && branch=main

	if [[ -x $(which git 2> /dev/null) ]]
	then
		git push ${remote} :refs/tags/${tag_name}
		git tag -f ${tag_name}
		git push ${remote} ${branch} --tags
	else
		echo -e "\n${txtred}git${txtrst} required\n"
		return 1
	fi
}


function getfileline() {
#
# $1 file name
# $2-$3 is the range of file
# $3 is optional if not passed only $2 line is printed
#
    local row
    local content

    [ ! -z "$3" ] && row=$3 || row=$2
    mapfile -s $(($2-1)) -n $((${row}-$2+1)) content < "$1"
    printf '%s' "${content[@]}"
}


function countfile() {
#
# $1 source directory (default $HOME)
# $2 file type (extension) (default all)
#
    local BLANK_ESCAPE="s/\ /\\\ /g"

    if [[ ! -z "$1" ]]; then
        local SRC_DIR=$(readlink -f $1)
    else
        local SRC_DIR=${HOME}
    fi

    if [[ ! -z "$2" ]]; then
        local FILES=$(find ${SRC_DIR} -type f | grep "\.$2" | sed "${BLANK_ESCAPE}")
    else
        local FILES=$(find ${SRC_DIR} -type f | sed "${BLANK_ESCAPE}")
    fi

    local NUM_FILES=$(echo "${FILES}" | wc -l)
    local TOT_SIZE=$(echo "${FILES}" | xargs du -ch | tail -n1 | cut -f1)

    echo "${txtgrn}file${txtrst}: ${NUM_FILES} ${txtylw}size${txtrst}: ${TOT_SIZE}"
}


function xzencrypt() {
#
# encrypt with xz
# $1 file name
#
	local IN=$1
	local XZ_OPT="-6e --compress --threads=0"

	if [[ ! -f ${IN} ]]; then
		echo -e "${IN} is not a regular file"
		return 1
	fi

	if [[ -x $(which xz 2> /dev/null) && -x $(which gpg 2> /dev/null) ]]; then
		tar -c ${IN} | xz ${XZ_OPT} | gpg -c > ${IN}.crypt
	else
		echo -e "\n${txtred}xz${txtrst} and ${txtred}gpg${txtrst} required\n"
		return 1
	fi
}


function xzdecrypt() {
#
# decrypt with xz
# $1 file name
#
	local IN=$1

	if [[ ! -f ${IN} ]]; then
		echo "'${IN}' is not a regular file"
		return 1
	fi

	if [[ -x $(which xz 2> /dev/null) && -x $(which gpg 2> /dev/null) ]]; then
		gpg -d ${IN} | xz --decompress
	else
		echo -e "\n${txtred}xz${txtrst} and ${txtred}gpg${txtrst} required\n"
		return 1
	fi
}


function randpasswd() {
#
# generate random password
# $1 numbero of char (default 8)
#
	[ -z "$1" ] && local digits=8 || local digits=$1

	local passwd=$(< /dev/urandom tr -dc [:alnum:] | head -c $digits)
	echo -e "\n\t${passwd}\n" 
}


function say() {
#
# festival speaks input strings
#
	if [[ -x $(which festival 2>/dev/null) ]]
	then
		echo -e "$@" | festival --tts
	else
		echo -e "\n${txtred}festival${txtrst} required\n"
		return 1
	fi
}


function typing() {
#
# write file on fly
# $1 filename
#
	if [[ -n "$1" ]]
	then
		echo -e "write on $1 (Ctrl-D for EOF)"
		tee >> $1
	else
		echo -e "\nenter a valid file name\n"
		return 1
	fi
}


function vim() {
#
# start vim with nerdtree
#
	if [[ -x $(which vim 2>/dev/null) ]]
	then
		local STTYOPTS="$(stty --save)"
		stty stop '' -ixoff
		command vim +NERDTreeToggle "$@"
		stty "${STTYOPTS}"
	else
		echo -e "\n${txtred}vim${txtrst} required\n"
		return 1
	fi
}


function calc() {
#
# $1 expression to calculate
#
	if [[ -x $(which vim 2>/dev/null) ]]; then
		echo -e "$1" | bc --mathlib --warn --standard
	else
		echo -e "\n${txtred}bc${txtrst} required\n"
		return 1
	fi
}


function encode64() {
#
# $@ variable string
#
	echo
	echo -e "$@" | base64
    echo
}


function decode64() {
#
# $@ variable string
#
	echo
	echo -e "$@" | base64 -d
    echo
}


function secrm() {
#
# secure remove (shred)
# $@ list of file name
#
	if [[ -x $(which shred 2>/dev/null) ]]
	then
		shred -xn7 --zero --remove $@ &
	else
		echo -e "\n${txtred}shred{txtrst} required\n"
		return 1
	fi
}


function swapfilename() {
#
# swap filename
# $1 first file name
# $1 second file name
#
	local TMP=.tmp.$$
	mv $1 ${TMP} && mv $2 $1 && mv ${TMP} $2
}
