" vim configuration file

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
" add others plugin if you want
Plugin 'VundleVim/Vundle.vim'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'Raimondi/delimitMate'
Bundle 'Valloric/YouCompleteMe'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'airblade/vim-gitgutter'
Plugin 'flazz/vim-colorschemes'
Plugin 'jamessan/vim-gnupg'
Plugin 'kevinw/pyflakes-vim'
Plugin 'kien/ctrlp.vim'
Plugin 'mattn/emmet-vim'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tmhedberg/SimpylFold'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'vimwiki/vimwiki'

" All of your Plugins must be added before the following line
call vundle#end()    " required


" airline plugin settings
set laststatus=2
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#left_sep=' '
let g:airline#extensions#tabline#left_alt_sep=' >> '

" sintastic plugin settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_c_check_header = 1
let g:syntastic_c_include_dirs = [$CFLAGS, 'include']
let g:syntastic_python_flake8_args = ['-m', 'flake8']
let g:syntastic_python_flake8_exec = 'python3'

let g:SimpylFold_docstring_preview=1

" you complete me settings
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

let python_highlight_all=1

"python virtualenv support
py3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  base_dir = os.environ['VIRTUAL_ENV']
  activate = os.path.join(base_dir, 'bin', 'activate')
  execfile(activate, dict(__file__=activate))
EOF

function Py2Check()
    let g:syntastic_python_python_exec = 'python'
endfunction

function Py3Check()
    let g:syntastic_python_python_exec = 'python3'
endfunction

call Py3Check() " default to python3"

" vim options
set autoindent
set autoread
set clipboard=unnamed
set encoding=utf-8
set expandtab
set fileformats=unix,dos,mac
set foldcolumn=2
set foldlevel=99
set foldmethod=indent
set hid
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw 
set lbr
set linebreak
set nobackup
set noerrorbells
set noswapfile
set novisualbell
set nowb
set number
set ruler
set shiftwidth=4
set showcmd
set showmatch
set showmode
set smartcase
set smarttab
set softtabstop=4
set splitbelow
set splitright
set t_Co=512
set tabstop=4
set timeoutlen=500
set title
set ttyfast
set tw=256
set wildmenu
set wildmode=longest:full,full
set wrap
set wrapmargin=2


" split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding with the spacebar
nnoremap <F6> za

" PEP 8 indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

" flagging unnecessary whitespace
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

set dictionary=/usr/share/dict/italian,/usr/share/dict/american-english

" Toggle invisible characters
set listchars=tab:▸\ ,eol:¬,space:·
noremap <F3> :set list!<CR>
inoremap <F3> <C-o>:set list!<CR>
cnoremap <F3> <C-c>:set list!<CR>


" use <leader>l to clear the highlighting of search
if maparg('<leader>l', 'n') ==# ''
	nnoremap <silent> <leader>l :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

" Remove the Windows ^M - when the encodings gets messed up
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm


" plugin NERDtree (Ctrl-n)
nnoremap <C-n> :NERDTreeToggle <CR> 
let NERDTreeIgnore = ['\.pyc$']

" space for search
nmap <space> /

" toggle spell checking
nnoremap sc :setlocal spell!<CR>

"fast saving (Ctrl-s)
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>i

" next buffer
nnoremap bn :bn<Return>

" convert tab into space
map <F2> :retab <CR>


syntax enable
filetype plugin on
filetype indent on

try
	colorscheme Monokai
catch
	try
		coloscheme twilight256
	catch
		try
			coloscheme thor
		catch
		endtry
	endtry
endtry
